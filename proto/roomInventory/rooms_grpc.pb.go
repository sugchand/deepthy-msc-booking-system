// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: proto/roomInventory/rooms.proto

package roomInventory

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoomInventoryClient is the client API for RoomInventory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomInventoryClient interface {
	NewRoom(ctx context.Context, in *RoomWithUserToken, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveRoom(ctx context.Context, in *RoomNumberWithUserToken, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RoomsOfType(ctx context.Context, in *RoomTypeWithUserTokenInTimePeriod, opts ...grpc.CallOption) (*RoomList, error)
	ReserveRoom(ctx context.Context, in *RoomNumberWithUserTokenInTimePeriod, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CancelRoomReserve(ctx context.Context, in *RoomNumberWithUserTokenInTimePeriod, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RoomCheckIn(ctx context.Context, in *RoomCheckInCheckout, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RoomCheckOut(ctx context.Context, in *RoomCheckInCheckout, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type roomInventoryClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomInventoryClient(cc grpc.ClientConnInterface) RoomInventoryClient {
	return &roomInventoryClient{cc}
}

func (c *roomInventoryClient) NewRoom(ctx context.Context, in *RoomWithUserToken, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/bookingSystem.proto.roomInventory.roomInventory/NewRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomInventoryClient) RemoveRoom(ctx context.Context, in *RoomNumberWithUserToken, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/bookingSystem.proto.roomInventory.roomInventory/RemoveRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomInventoryClient) RoomsOfType(ctx context.Context, in *RoomTypeWithUserTokenInTimePeriod, opts ...grpc.CallOption) (*RoomList, error) {
	out := new(RoomList)
	err := c.cc.Invoke(ctx, "/bookingSystem.proto.roomInventory.roomInventory/RoomsOfType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomInventoryClient) ReserveRoom(ctx context.Context, in *RoomNumberWithUserTokenInTimePeriod, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/bookingSystem.proto.roomInventory.roomInventory/ReserveRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomInventoryClient) CancelRoomReserve(ctx context.Context, in *RoomNumberWithUserTokenInTimePeriod, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/bookingSystem.proto.roomInventory.roomInventory/CancelRoomReserve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomInventoryClient) RoomCheckIn(ctx context.Context, in *RoomCheckInCheckout, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/bookingSystem.proto.roomInventory.roomInventory/RoomCheckIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomInventoryClient) RoomCheckOut(ctx context.Context, in *RoomCheckInCheckout, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/bookingSystem.proto.roomInventory.roomInventory/RoomCheckOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomInventoryServer is the server API for RoomInventory service.
// All implementations must embed UnimplementedRoomInventoryServer
// for forward compatibility
type RoomInventoryServer interface {
	NewRoom(context.Context, *RoomWithUserToken) (*emptypb.Empty, error)
	RemoveRoom(context.Context, *RoomNumberWithUserToken) (*emptypb.Empty, error)
	RoomsOfType(context.Context, *RoomTypeWithUserTokenInTimePeriod) (*RoomList, error)
	ReserveRoom(context.Context, *RoomNumberWithUserTokenInTimePeriod) (*emptypb.Empty, error)
	CancelRoomReserve(context.Context, *RoomNumberWithUserTokenInTimePeriod) (*emptypb.Empty, error)
	RoomCheckIn(context.Context, *RoomCheckInCheckout) (*emptypb.Empty, error)
	RoomCheckOut(context.Context, *RoomCheckInCheckout) (*emptypb.Empty, error)
	mustEmbedUnimplementedRoomInventoryServer()
}

// UnimplementedRoomInventoryServer must be embedded to have forward compatible implementations.
type UnimplementedRoomInventoryServer struct {
}

func (UnimplementedRoomInventoryServer) NewRoom(context.Context, *RoomWithUserToken) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewRoom not implemented")
}
func (UnimplementedRoomInventoryServer) RemoveRoom(context.Context, *RoomNumberWithUserToken) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRoom not implemented")
}
func (UnimplementedRoomInventoryServer) RoomsOfType(context.Context, *RoomTypeWithUserTokenInTimePeriod) (*RoomList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomsOfType not implemented")
}
func (UnimplementedRoomInventoryServer) ReserveRoom(context.Context, *RoomNumberWithUserTokenInTimePeriod) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveRoom not implemented")
}
func (UnimplementedRoomInventoryServer) CancelRoomReserve(context.Context, *RoomNumberWithUserTokenInTimePeriod) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelRoomReserve not implemented")
}
func (UnimplementedRoomInventoryServer) RoomCheckIn(context.Context, *RoomCheckInCheckout) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomCheckIn not implemented")
}
func (UnimplementedRoomInventoryServer) RoomCheckOut(context.Context, *RoomCheckInCheckout) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomCheckOut not implemented")
}
func (UnimplementedRoomInventoryServer) mustEmbedUnimplementedRoomInventoryServer() {}

// UnsafeRoomInventoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomInventoryServer will
// result in compilation errors.
type UnsafeRoomInventoryServer interface {
	mustEmbedUnimplementedRoomInventoryServer()
}

func RegisterRoomInventoryServer(s grpc.ServiceRegistrar, srv RoomInventoryServer) {
	s.RegisterService(&RoomInventory_ServiceDesc, srv)
}

func _RoomInventory_NewRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomWithUserToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomInventoryServer).NewRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookingSystem.proto.roomInventory.roomInventory/NewRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomInventoryServer).NewRoom(ctx, req.(*RoomWithUserToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomInventory_RemoveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomNumberWithUserToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomInventoryServer).RemoveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookingSystem.proto.roomInventory.roomInventory/RemoveRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomInventoryServer).RemoveRoom(ctx, req.(*RoomNumberWithUserToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomInventory_RoomsOfType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomTypeWithUserTokenInTimePeriod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomInventoryServer).RoomsOfType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookingSystem.proto.roomInventory.roomInventory/RoomsOfType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomInventoryServer).RoomsOfType(ctx, req.(*RoomTypeWithUserTokenInTimePeriod))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomInventory_ReserveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomNumberWithUserTokenInTimePeriod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomInventoryServer).ReserveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookingSystem.proto.roomInventory.roomInventory/ReserveRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomInventoryServer).ReserveRoom(ctx, req.(*RoomNumberWithUserTokenInTimePeriod))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomInventory_CancelRoomReserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomNumberWithUserTokenInTimePeriod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomInventoryServer).CancelRoomReserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookingSystem.proto.roomInventory.roomInventory/CancelRoomReserve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomInventoryServer).CancelRoomReserve(ctx, req.(*RoomNumberWithUserTokenInTimePeriod))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomInventory_RoomCheckIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomCheckInCheckout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomInventoryServer).RoomCheckIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookingSystem.proto.roomInventory.roomInventory/RoomCheckIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomInventoryServer).RoomCheckIn(ctx, req.(*RoomCheckInCheckout))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomInventory_RoomCheckOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomCheckInCheckout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomInventoryServer).RoomCheckOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookingSystem.proto.roomInventory.roomInventory/RoomCheckOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomInventoryServer).RoomCheckOut(ctx, req.(*RoomCheckInCheckout))
	}
	return interceptor(ctx, in, info, handler)
}

// RoomInventory_ServiceDesc is the grpc.ServiceDesc for RoomInventory service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoomInventory_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bookingSystem.proto.roomInventory.roomInventory",
	HandlerType: (*RoomInventoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewRoom",
			Handler:    _RoomInventory_NewRoom_Handler,
		},
		{
			MethodName: "RemoveRoom",
			Handler:    _RoomInventory_RemoveRoom_Handler,
		},
		{
			MethodName: "RoomsOfType",
			Handler:    _RoomInventory_RoomsOfType_Handler,
		},
		{
			MethodName: "ReserveRoom",
			Handler:    _RoomInventory_ReserveRoom_Handler,
		},
		{
			MethodName: "CancelRoomReserve",
			Handler:    _RoomInventory_CancelRoomReserve_Handler,
		},
		{
			MethodName: "RoomCheckIn",
			Handler:    _RoomInventory_RoomCheckIn_Handler,
		},
		{
			MethodName: "RoomCheckOut",
			Handler:    _RoomInventory_RoomCheckOut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/roomInventory/rooms.proto",
}
